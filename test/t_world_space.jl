using Test
using RouteMap
using RouteMap: are_paths_close, indices_of_intersecting_boundary_boxes
# Single leg
ABx = [27223.927, 27229.04, 27235.605, 27239.18, 27247.52, 27255.73, 27265.92, 27275.89, 27285.44, 27294.56, 27303.23, 27303.467, 27311.47, 27313.06, 27314.78, 27315.503, 27315.52, 27315.86, 27315.908, 27316.16, 27315.31, 27314.76, 27314.51, 27314.66, 27315.21, 27316.86, 27318.76, 27320.49, 27322.42, 27324.307, 27324.54, 27326.82, 27329.14, 27331.31, 27333.09, 27335.39, 27337.04, 27338.6, 27340.09, 27341.24, 27341.58, 27345.432, 27353.97, 27357.51, 27374.74, 27392.24, 27415.01, 27426.21, 27426.62, 27427.07, 27427.56, 27428.11, 27428.67, 27429.29, 27429.94, 27430.61, 27431.32, 27432.05, 27432.8, 27433.56, 27434.34, 27435.1, 27435.87, 27436.63, 27437.37, 27438.08, 27438.58, 27439.45, 27440.07, 27440.66, 27441.23, 27441.74, 27442.21, 27442.65, 27443.05, 27443.4, 27444.01, 27444.28, 27444.54, 27444.76, 27444.95, 27445.09, 27445.2, 27445.27, 27445.29, 27445.26, 27445.18, 27445.05, 27444.86, 27444.64, 27448.65, 27453.39, 27465.58, 27476.15, 27485.17, 27495.79, 27506.52, 27517.13, 27521.96, 27533.64, 27539.93, 27552.14, 27564.44, 27577.33, 27589.27, 27599.29, 27604.37, 27613.8, 27626.38, 27635.79, 27647.13, 27657.58, 27666.2, 27675.6, 27685.49, 27695.09, 27706.08, 27715.93, 27716.331]
ABy = [6.945780949e6, 6.94577371e6, 6.945764199e6, 6.94575902e6, 6.94574635e6, 6.94573357e6, 6.94571664e6, 6.94569925e6, 6.94568162e6, 6.94566376e6, 6.94564569e6, 6.945645165e6, 6.94562742e6, 6.94561805e6, 6.94561245e6, 6.945608849e6, 6.94560854e6, 6.94560233e6, 6.945600937e6, 6.94559371e6, 6.9455918e6, 6.94558978e6, 6.94558752e6, 6.94558519e6, 6.94558295e6, 6.94557986e6, 6.94557734e6, 6.94557593e6, 6.94557481e6, 6.945574116e6, 6.94557403e6, 6.94557359e6, 6.9455736e6, 6.94557398e6, 6.94557458e6, 6.94557576e6, 6.94557705e6, 6.94557861e6, 6.94558076e6, 6.94558392e6, 6.9455855e6, 6.945589747e6, 6.94559916e6, 6.94560486e6, 6.94561512e6, 6.9456249e6, 6.94563811e6, 6.94564292e6, 6.94564243e6, 6.94564195e6, 6.94564149e6, 6.94564106e6, 6.94564064e6, 6.94564027e6, 6.94563993e6, 6.94563963e6, 6.94563937e6, 6.94563917e6, 6.94563901e6, 6.94563891e6, 6.94563887e6, 6.94563888e6, 6.94563893e6, 6.94563905e6, 6.94563923e6, 6.94563944e6, 6.94563964e6, 6.94564002e6, 6.94564036e6, 6.94564075e6, 6.94564116e6, 6.94564159e6, 6.94564205e6, 6.94564252e6, 6.945643e6, 6.94564349e6, 6.94564449e6, 6.94564504e6, 6.94564561e6, 6.94564621e6, 6.94564684e6, 6.9456475e6, 6.94564818e6, 6.94564888e6, 6.9456496e6, 6.94565033e6, 6.94565107e6, 6.94565181e6, 6.94565254e6, 6.94565324e6, 6.94565501e6, 6.94565698e6, 6.94566204e6, 6.94566502e6, 6.94566591e6, 6.94566652e6, 6.94566628e6, 6.94566558e6, 6.9456653e6, 6.94566494e6, 6.94566482e6, 6.94566414e6, 6.94566343e6, 6.94566269e6, 6.94566195e6, 6.9456614e6, 6.94566102e6, 6.94565921e6, 6.9456574e6, 6.94565545e6, 6.94565241e6, 6.94564852e6, 6.94564463e6, 6.94563977e6, 6.94563388e6, 6.94562712e6, 6.94561837e6, 6.94561015e6, 6.945609812e6]   
text_A =  "Ulsteinvik skysstasjon"
text_B = "Holsekerdalen"
prominence_A = 1.0
prominence_B = 2.0
BAx = [27716.331, 27715.93, 27706.08, 27695.09, 27685.49, 27675.6, 27666.2, 27657.58, 27647.13, 27635.79, 27626.38, 27613.8, 27604.37, 27599.29, 27589.27, 27577.33, 27564.44, 27552.14, 27539.93, 27533.64, 27521.96, 27517.13, 27506.52, 27495.79, 27485.17, 27476.15, 27465.58, 27453.39, 27448.65, 27444.64, 27444.86, 27445.05, 27445.18, 27445.26, 27445.29, 27445.27, 27445.2, 27445.09, 27444.95, 27444.76, 27444.54, 27444.28, 27444.01, 27443.4, 27443.05, 27442.65, 27442.21, 27441.74, 27441.23, 27440.66, 27440.07, 27439.45, 27438.58, 27438.08, 27437.37, 27436.63, 27435.87, 27435.1, 27434.34, 27433.56, 27432.8, 27432.05, 27431.32, 27430.61, 27429.94, 27429.29, 27428.67, 27428.11, 27427.56, 27427.07, 27426.62, 27426.21, 27415.01, 27392.24, 27374.74, 27357.51, 27350.1, 27345.36, 27339.722, 27332.02, 27330.02, 27327.16, 27325.55, 27322.378, 27319.74, 27317.37, 27311.47, 27303.467, 27303.23, 27294.56, 27285.44, 27275.89, 27265.92, 27265.516]
BAy = [6.945609812e6, 6.94561015e6, 6.94561837e6, 6.94562712e6, 6.94563388e6, 6.94563977e6, 6.94564463e6, 6.94564852e6, 6.94565241e6, 6.94565545e6, 6.9456574e6, 6.94565921e6, 6.94566102e6, 6.9456614e6, 6.94566195e6, 6.94566269e6, 6.94566343e6, 6.94566414e6, 6.94566482e6, 6.94566494e6, 6.9456653e6, 6.94566558e6, 6.94566628e6, 6.94566652e6, 6.94566591e6, 6.94566502e6, 6.94566204e6, 6.94565698e6, 6.94565501e6, 6.94565324e6, 6.94565254e6, 6.94565181e6, 6.94565107e6, 6.94565033e6, 6.9456496e6, 6.94564888e6, 6.94564818e6, 6.9456475e6, 6.94564684e6, 6.94564621e6, 6.94564561e6, 6.94564504e6, 6.94564449e6, 6.94564349e6, 6.945643e6, 6.94564252e6, 6.94564205e6, 6.94564159e6, 6.94564116e6, 6.94564075e6, 6.94564036e6, 6.94564002e6, 6.94563964e6, 6.94563944e6, 6.94563923e6, 6.94563905e6, 6.94563893e6, 6.94563888e6, 6.94563887e6, 6.94563891e6, 6.94563901e6, 6.94563917e6, 6.94563937e6, 6.94563963e6, 6.94563993e6, 6.94564027e6, 6.94564064e6, 6.94564106e6, 6.94564149e6, 6.94564195e6, 6.94564243e6, 6.94564292e6, 6.94563811e6, 6.9456249e6, 6.94561512e6, 6.94560486e6, 6.94560422e6, 6.9456026e6, 6.945601262e6, 6.94560023e6, 6.94560067e6, 6.94560546e6, 6.94560761e6, 6.945611439e6, 6.94561536e6, 6.94561935e6, 6.94562742e6, 6.945645165e6, 6.94564569e6, 6.94566376e6, 6.94568162e6, 6.94569925e6, 6.94571664e6, 6.945717311e6]

# Try to create an empty Leg
@test_throws AssertionError Leg()
# Try to create a Leg with only BA path
@test_throws AssertionError Leg(;BAx, BAy)
# Try to create a Leg with unequal leg length
@test_throws AssertionError Leg(;ABx, ABy = BAy)
# Leg with only AB path
@test Leg(;ABx, ABy) isa Leg
@test round(Leg(;ABx, ABy).bb_utm.corner1[1]) == 27224
# Leg with both directions 
@test Leg(;ABx, ABy, BAx, BAy) isa Leg
leg = Leg(;ABx, ABy, BAx, BAy, text_A, text_B, prominence_A, prominence_B)
@test leg.label_A.prominence == prominence_A
@test leg.label_B.prominence == prominence_B
@test leg.label_A.x == round(first(ABx))
@test leg.label_A.y == round(first(ABy))
@test leg.label_B.x == round(last(ABx))
@test leg.label_B.x == round(last(ABx))

# Test printing reproduce
leg_copy = Leg(; text_A = "Ulsteinvik skysstasjon", prominence_A = 1.0, text_B = "Holsekerdalen", prominence_B = 2.0, ABx = [27223.927, 27229.04, 27235.605, 27239.18, 27247.52, 27255.73, 27265.92, 27275.89, 27285.44, 27294.56, 27303.23, 27303.467, 27311.47, 27313.06, 27314.78, 27315.503, 27315.52, 27315.86, 27315.908, 27316.16, 27315.31, 27314.76, 27314.51, 27314.66, 27315.21, 27316.86, 27318.76, 27320.49, 27322.42, 27324.307, 27324.54, 27326.82, 27329.14, 27331.31, 27333.09, 27335.39, 27337.04, 27338.6, 27340.09, 27341.24, 27341.58, 27345.432, 27353.97, 27357.51, 27374.74, 27392.24, 27415.01, 27426.21, 27426.62, 27427.07, 27427.56, 27428.11, 27428.67, 27429.29, 27429.94, 27430.61, 27431.32, 27432.05, 27432.8, 27433.56, 27434.34, 27435.1, 27435.87, 27436.63, 27437.37, 27438.08, 27438.58, 27439.45, 27440.07, 27440.66, 27441.23, 27441.74, 27442.21, 27442.65, 27443.05, 27443.4, 27444.01, 27444.28, 27444.54, 27444.76, 27444.95, 27445.09, 27445.2, 27445.27, 27445.29, 27445.26, 27445.18, 27445.05, 27444.86, 27444.64, 27448.65, 27453.39, 27465.58, 27476.15, 27485.17, 27495.79, 27506.52, 27517.13, 27521.96, 27533.64, 27539.93, 27552.14, 27564.44, 27577.33, 27589.27, 27599.29, 27604.37, 27613.8, 27626.38, 27635.79, 27647.13, 27657.58, 27666.2, 27675.6, 27685.49, 27695.09, 27706.08, 27715.93, 27716.331], ABy = [6.945780949e6, 6.94577371e6, 6.945764199e6, 6.94575902e6, 6.94574635e6, 6.94573357e6, 6.94571664e6, 6.94569925e6, 6.94568162e6, 6.94566376e6, 6.94564569e6, 6.945645165e6, 6.94562742e6, 6.94561805e6, 6.94561245e6, 6.945608849e6, 6.94560854e6, 6.94560233e6, 6.945600937e6, 6.94559371e6, 6.9455918e6, 6.94558978e6, 6.94558752e6, 6.94558519e6, 6.94558295e6, 6.94557986e6, 6.94557734e6, 6.94557593e6, 6.94557481e6, 6.945574116e6, 6.94557403e6, 6.94557359e6, 6.9455736e6, 6.94557398e6, 6.94557458e6, 6.94557576e6, 6.94557705e6, 6.94557861e6, 6.94558076e6, 6.94558392e6, 6.9455855e6, 6.945589747e6, 6.94559916e6, 6.94560486e6, 6.94561512e6, 6.9456249e6, 6.94563811e6, 6.94564292e6, 6.94564243e6, 6.94564195e6, 6.94564149e6, 6.94564106e6, 6.94564064e6, 6.94564027e6, 6.94563993e6, 6.94563963e6, 6.94563937e6, 6.94563917e6, 6.94563901e6, 6.94563891e6, 6.94563887e6, 6.94563888e6, 6.94563893e6, 6.94563905e6, 6.94563923e6, 6.94563944e6, 6.94563964e6, 6.94564002e6, 6.94564036e6, 6.94564075e6, 6.94564116e6, 6.94564159e6, 6.94564205e6, 6.94564252e6, 6.945643e6, 6.94564349e6, 6.94564449e6, 6.94564504e6, 6.94564561e6, 6.94564621e6, 6.94564684e6, 6.9456475e6, 6.94564818e6, 6.94564888e6, 6.9456496e6, 6.94565033e6, 6.94565107e6, 6.94565181e6, 6.94565254e6, 6.94565324e6, 6.94565501e6, 6.94565698e6, 6.94566204e6, 6.94566502e6, 6.94566591e6, 6.94566652e6, 6.94566628e6, 6.94566558e6, 6.9456653e6, 6.94566494e6, 6.94566482e6, 6.94566414e6, 6.94566343e6, 6.94566269e6, 6.94566195e6, 6.9456614e6, 6.94566102e6, 6.94565921e6, 6.9456574e6, 6.94565545e6, 6.94565241e6, 6.94564852e6, 6.94564463e6, 6.94563977e6, 6.94563388e6, 6.94562712e6, 6.94561837e6, 6.94561015e6, 6.945609812e6], BAx = [27716.331, 27715.93, 27706.08, 27695.09, 27685.49, 27675.6, 27666.2, 27657.58, 27647.13, 27635.79, 27626.38, 27613.8, 27604.37, 27599.29, 27589.27, 27577.33, 27564.44, 27552.14, 27539.93, 27533.64, 27521.96, 27517.13, 27506.52, 27495.79, 27485.17, 27476.15, 27465.58, 27453.39, 27448.65, 27444.64, 27444.86, 27445.05, 27445.18, 27445.26, 27445.29, 27445.27, 27445.2, 27445.09, 27444.95, 27444.76, 27444.54, 27444.28, 27444.01, 27443.4, 27443.05, 27442.65, 27442.21, 27441.74, 27441.23, 27440.66, 27440.07, 27439.45, 27438.58, 27438.08, 27437.37, 27436.63, 27435.87, 27435.1, 27434.34, 27433.56, 27432.8, 27432.05, 27431.32, 27430.61, 27429.94, 27429.29, 27428.67, 27428.11, 27427.56, 27427.07, 27426.62, 27426.21, 27415.01, 27392.24, 27374.74, 27357.51, 27350.1, 27345.36, 27339.722, 27332.02, 27330.02, 27327.16, 27325.55, 27322.378, 27319.74, 27317.37, 27311.47, 27303.467, 27303.23, 27294.56, 27285.44, 27275.89, 27265.92, 27265.516], BAy = [6.945609812e6, 6.94561015e6, 6.94561837e6, 6.94562712e6, 6.94563388e6, 6.94563977e6, 6.94564463e6, 6.94564852e6, 6.94565241e6, 6.94565545e6, 6.9456574e6, 6.94565921e6, 6.94566102e6, 6.9456614e6, 6.94566195e6, 6.94566269e6, 6.94566343e6, 6.94566414e6, 6.94566482e6, 6.94566494e6, 6.9456653e6, 6.94566558e6, 6.94566628e6, 6.94566652e6, 6.94566591e6, 6.94566502e6, 6.94566204e6, 6.94565698e6, 6.94565501e6, 6.94565324e6, 6.94565254e6, 6.94565181e6, 6.94565107e6, 6.94565033e6, 6.9456496e6, 6.94564888e6, 6.94564818e6, 6.9456475e6, 6.94564684e6, 6.94564621e6, 6.94564561e6, 6.94564504e6, 6.94564449e6, 6.94564349e6, 6.945643e6, 6.94564252e6, 6.94564205e6, 6.94564159e6, 6.94564116e6, 6.94564075e6, 6.94564036e6, 6.94564002e6, 6.94563964e6, 6.94563944e6, 6.94563923e6, 6.94563905e6, 6.94563893e6, 6.94563888e6, 6.94563887e6, 6.94563891e6, 6.94563901e6, 6.94563917e6, 6.94563937e6, 6.94563963e6, 6.94563993e6, 6.94564027e6, 6.94564064e6, 6.94564106e6, 6.94564149e6, 6.94564195e6, 6.94564243e6, 6.94564292e6, 6.94563811e6, 6.9456249e6, 6.94561512e6, 6.94560486e6, 6.94560422e6, 6.9456026e6, 6.945601262e6, 6.94560023e6, 6.94560067e6, 6.94560546e6, 6.94560761e6, 6.945611439e6, 6.94561536e6, 6.94561935e6, 6.94562742e6, 6.945645165e6, 6.94564569e6, 6.94566376e6, 6.94568162e6, 6.94569925e6, 6.94571664e6, 6.945717311e6])

@test sum(leg_copy.ABx .- leg.ABx) ≈ 0.0
@test sum(leg_copy.ABy .- leg.ABy) ≈ 0.0
@test sum(leg_copy.BAx .- leg.BAx) ≈ 0.0
@test leg_copy.label_A.text == leg.label_A.text


# Legs comparison. Different density paths here, reversed of each other:
vx = [1, 2.2, 3, 4.1 , 5, 6]
vy = [1.1, 2.0, 3, 2 , 1.2, 0.5]
wx = [6.8765305817039915, 5.5108313221027805, 3.6517099327681195, 3.151178505491685, 1.2679176009349515]
wy = [1.2223257209157279, 1.2477648298469046, 3.774275715327908, 2.7447059574248542, 1.6639055278414527]
@test are_paths_close(vx, vy, wx, wy; threshold = 2.0)
vy .+= 5
@test ! are_paths_close(vx, vy, wx, wy; threshold = 2.0)

@test are_paths_close(ABx, ABy, BAx, BAy)


# Legs collection
legs = [leg]
leg_asymmetric_dummy = Leg(;ABx = [1.0, 2],
                ABy = [1.0, 2],
                BAx = [2, 1.5, 1],
                BAy = [2, 1.5, 1],
                text_A = "Important",
                text_B = "Intermediate stop",
                prominence_A = 1.0,
                prominence_B = 2.0)
# The boundary boxes of leg and leg_asymmetric_dummy do not overlap.
@test isempty(indices_of_intersecting_boundary_boxes(legs, leg_asymmetric_dummy))

add_or_update_if_not_redundant!(legs, leg_asymmetric_dummy)
@test length(legs) == 2
# Redundantly add again. Does not increase the number of legs.
add_or_update_if_not_redundant!(legs, leg_asymmetric_dummy)
@test length(legs) == 2

# Now make practically the same leg 'leg', but in
# the way it would have been made if approached first
# from the B to A direction.
leg_reversed = Leg(;ABx = BAx, ABy = BAy, BAx = ABx, BAy = ABy, 
    text_A = text_B, text_B = text_A, 
    prominence_A = prominence_B, 
    prominence_B = prominence_A)
# Adding the reverse version to 'legs' is also redundant.
add_or_update_if_not_redundant!(legs, leg_reversed)
@test length(legs) == 2

# Now say we made one (symmetric) leg by travelling a route via Ulsteinvik to Holsekerdalen.
# Later, we come back but discover we need to take the other way around the roundabout. 
# Also, Ulsteinvik is the end stop now, hence the label has prominence > 1.
# Let's start over and see if we end up with an assymmetric leg, containing both ways
# around the roundabout, and with the Ulsteinvik label with promincence = 1.

# Lets reuse variable names. The first leg is 'symmetric' since we don't know
# about the alternative way about the roundandround yet.
leg = Leg(;ABx, ABy, text_A, text_B, prominence_A = 2.0, prominence_B = 2.0)
legs = [leg]
@test isempty(legs[1].BAx)
leg_returning = Leg(;ABx = BAx, ABy = BAy, text_A = text_B, text_B = text_A, prominence_A = 2.0, prominence_B = 1.0)
@test isempty(leg_returning.BAx)

# The boundary boxes of both legs are identical, but with roundoff errors.
@test ! isempty(indices_of_intersecting_boundary_boxes(legs, leg_returning))
add_or_update_if_not_redundant!(legs, leg_returning)
@test length(legs) == 1
@test ! isempty(legs[1].BAx)


# Test 'are_paths_close':
# We test with two which are pretty close, but NOT on the same road, mostly.
# leg1 from MOR:ServiceJourney:338_143_9150000005395362. 
# source_filename:         MOR_MOR-Line-338_338_Volda-Orsta-Garnes-Hareid.xml
# ---------------------------------------------------------------------------------
# time_str      stop_name                                   position[1] position[2]
# Dep/ Arr      Stop                                        Easting     Northing
# 21:10:00      Dimnakrysset                                27721       6943086     
# 21:12:00      Strandabøen                                 27811       6944172 
#
# leg2 from MOR:ServiceJourney:306_101_9150000011947110
# source_filename:         MOR_MOR-Line-306_306_Ulsteinvik-Dimna.xml
# ---------------------------------------------------------------------------------
# time_str      stop_name                                   position[1] position[2]
# Dep/ Arr      Stop                                        Easting     Northing
# 06:42:00      Strandabø gamlevegen                        27736       6943324     
# 06:44:00      Strandabøen                                 27811       6944172     


label_A1 = LabelUTM("Dimnakrysset", 2.0, 27721.0, 6.94309e6)
label_B1 = LabelUTM("Strandabøen", 2.0, 27809.5, 6.94417e6)
A1B1x = [27720.954, 27726.309, 27732.2, 27733.1, 27734.1, 27735.31, 27736.4, 27739.49, 27740.9, 27743.2, 27745.4, 27747.49, 27749.49, 27751.31, 27753.4, 27755.81, 27758.99, 27761.6, 27764.4, 27764.9, 27765.99, 27768.7, 27770.6, 27772.81, 27774.6, 27776.81, 27778.49, 27778.9, 27780.81, 27782.6, 27784.4, 27784.9, 27785.99, 27787.81, 27789.9, 27791.9, 27793.7, 27795.81, 27797.49, 27799.2, 27801.2, 27803.1, 27804.9, 27806.7, 27808.49, 27810.6, 27812.4, 27814.1, 27815.81, 27817.6, 27819.31, 27820.99, 27822.49, 27824.2, 27825.81, 27827.2, 27828.81, 27830.31, 27831.7, 27833.2, 27834.49, 27836.1, 27837.81, 27838.99, 27840.31, 27841.81, 27842.99, 27844.31, 27845.7, 27846.99, 27848.31, 27849.6, 27850.81, 27851.99, 27853.1, 27854.4, 27855.31, 27856.31, 27857.49, 27858.49, 27859.6, 27860.6, 27861.4, 27862.4, 27863.31, 27864.2, 27865.1, 27865.99, 27866.7, 27867.7, 27868.4, 27869.31, 27870.1, 27870.81, 27871.6, 27872.31, 27873.1, 27873.7, 27874.31, 27875.1, 27875.7, 27876.31, 27876.7, 27877.2, 27877.6, 27877.99, 27878.4, 27878.81, 27879.1, 27879.49, 27879.9, 27880.2, 27880.49, 27880.81, 27881.1, 27881.49, 27881.81, 27881.9, 27882.1, 27882.31, 27882.49, 27882.6, 27882.7, 27882.81, 27882.99, 27882.99, 27883.1, 27883.2, 27883.2, 27883.4, 27883.49, 27883.49, 27883.4, 27883.49, 27883.49, 27883.6, 27883.6, 27883.6, 27883.6, 27883.49, 27883.49, 27883.49, 27883.4, 27883.4, 27883.31, 27883.31, 27883.1, 27883.1, 27882.9, 27882.81, 27882.7, 27882.49, 27882.4, 27882.2, 27882.1, 27881.81, 27881.7, 27881.4, 27881.4, 27881.1, 27880.9, 27880.7, 27880.49, 27880.2, 27879.9, 27879.49, 27879.4, 27879.1, 27878.9, 27878.49, 27878.2, 27877.9, 27877.49, 27877.31, 27876.9, 27876.49, 27876.1, 27875.6, 27875.1, 27874.7, 27874.31, 27873.81, 27873.4, 27872.9, 27872.2, 27871.7, 27870.9, 27869.99, 27869.1, 27867.9, 27866.49, 27865.4, 27863.99, 27862.4, 27860.7, 27858.9, 27856.81, 27854.6, 27852.9, 27851.2, 27849.49, 27847.7, 27845.9, 27843.99, 27842.2, 27840.4, 27838.4, 27836.4, 27834.49, 27832.6, 27830.6, 27828.7, 27826.81, 27824.81, 27822.7, 27820.997, 27818.9, 27816.9, 27814.99, 27813.1, 27811.2, 27809.479]
A1B1y = [6.943086032e6, 6.943098359e6, 6.9431129e6, 6.943115e6, 6.9431171e6, 6.9431198e6, 6.9431225e6, 6.9431299e6, 6.9431335e6, 6.9431391e6, 6.9431443e6, 6.9431497e6, 6.9431545e6, 6.9431589e6, 6.9431639e6, 6.9431697e6, 6.9431775e6, 6.9431838e6, 6.9431908e6, 6.943192e6, 6.9431947e6, 6.9432014e6, 6.9432064e6, 6.943212e6, 6.9432169e6, 6.9432226e6, 6.9432268e6, 6.9432278e6, 6.9432331e6, 6.9432376e6, 6.9432428e6, 6.943244e6, 6.943247e6, 6.943252e6, 6.9432575e6, 6.9432631e6, 6.9432685e6, 6.9432744e6, 6.9432796e6, 6.9432846e6, 6.94329e6, 6.9432957e6, 6.943301e6, 6.9433066e6, 6.943312e6, 6.9433183e6, 6.9433236e6, 6.943329e6, 6.9433344e6, 6.9433401e6, 6.9433457e6, 6.9433512e6, 6.9433568e6, 6.9433621e6, 6.9433678e6, 6.9433727e6, 6.9433783e6, 6.9433839e6, 6.9433892e6, 6.9433948e6, 6.9433999e6, 6.9434062e6, 6.9434124e6, 6.9434175e6, 6.9434228e6, 6.9434286e6, 6.9434342e6, 6.9434399e6, 6.9434457e6, 6.9434514e6, 6.943457e6, 6.9434633e6, 6.9434688e6, 6.9434743e6, 6.94348e6, 6.9434856e6, 6.9434907e6, 6.9434961e6, 6.9435018e6, 6.943507e6, 6.9435127e6, 6.9435186e6, 6.943524e6, 6.9435297e6, 6.9435355e6, 6.9435408e6, 6.9435466e6, 6.9435526e6, 6.9435577e6, 6.9435639e6, 6.9435692e6, 6.943575e6, 6.9435811e6, 6.9435868e6, 6.9435922e6, 6.9435982e6, 6.9436038e6, 6.9436097e6, 6.9436146e6, 6.9436212e6, 6.9436268e6, 6.9436319e6, 6.9436362e6, 6.9436407e6, 6.9436453e6, 6.9436496e6, 6.9436544e6, 6.9436585e6, 6.943663e6, 6.9436674e6, 6.9436722e6, 6.9436778e6, 6.943682e6, 6.9436869e6, 6.9436921e6, 6.9436969e6, 6.9437011e6, 6.9437055e6, 6.9437099e6, 6.9437135e6, 6.9437171e6, 6.9437211e6, 6.9437249e6, 6.9437285e6, 6.9437316e6, 6.9437355e6, 6.9437384e6, 6.943742e6, 6.9437458e6, 6.9437503e6, 6.9437546e6, 6.9437586e6, 6.9437624e6, 6.9437668e6, 6.94377e6, 6.9437737e6, 6.9437775e6, 6.943781e6, 6.9437851e6, 6.9437897e6, 6.9437934e6, 6.943797e6, 6.9438014e6, 6.9438049e6, 6.9438087e6, 6.9438128e6, 6.9438162e6, 6.9438202e6, 6.9438238e6, 6.9438272e6, 6.9438309e6, 6.9438348e6, 6.9438388e6, 6.9438424e6, 6.9438465e6, 6.9438503e6, 6.9438545e6, 6.9438585e6, 6.9438618e6, 6.9438652e6, 6.9438695e6, 6.9438734e6, 6.9438773e6, 6.9438818e6, 6.9438857e6, 6.9438893e6, 6.9438929e6, 6.9438964e6, 6.9439003e6, 6.9439041e6, 6.9439075e6, 6.9439114e6, 6.9439154e6, 6.9439186e6, 6.943923e6, 6.9439269e6, 6.9439308e6, 6.9439349e6, 6.9439393e6, 6.9439427e6, 6.9439467e6, 6.9439503e6, 6.9439537e6, 6.9439575e6, 6.943962e6, 6.9439647e6, 6.9439708e6, 6.9439759e6, 6.9439812e6, 6.9439875e6, 6.9439946e6, 6.9440003e6, 6.9440065e6, 6.9440133e6, 6.9440205e6, 6.9440272e6, 6.9440355e6, 6.9440427e6, 6.9440481e6, 6.9440536e6, 6.9440588e6, 6.9440644e6, 6.9440698e6, 6.9440753e6, 6.9440806e6, 6.944086e6, 6.9440914e6, 6.9440969e6, 6.9441021e6, 6.9441074e6, 6.9441129e6, 6.9441181e6, 6.9441234e6, 6.9441289e6, 6.9441344e6, 6.94413848e6, 6.9441447e6, 6.9441503e6, 6.9441554e6, 6.944161e6, 6.9441665e6, 6.944171473e6]

label_A2 = LabelUTM("Strandabø gamlevegen", 2.0, 27735.9, 6.94332e6)
label_B2 = LabelUTM("Strandabøen", 2.0, 27809.5, 6.94417e6)
A2B2x = [27735.902, 27735.99, 27738.1, 27740.1, 27741.9, 27744.36, 27744.6, 27745.9, 27747.2, 27748.1, 27749.6, 27751.31, 27753.4, 27754.7, 27756.2, 27757.99, 27759.49, 27760.9, 27762.1, 27763.49, 27764.9, 27766.4, 27767.81, 27769.1, 27770.4, 27771.6, 27773.1, 27774.9, 27776.31, 27777.6, 27779.4, 27780.7, 27782.1, 27783.6, 27784.99, 27786.31, 27787.81, 27788.7, 27789.9, 27790.99, 27792.1, 27793.2, 27794.6, 27795.6, 27796.9, 27798.1, 27799.4, 27800.9, 27802.31, 27803.6, 27804.99, 27806.4, 27807.6, 27808.81, 27809.99, 27811.1, 27811.6, 27812.49, 27812.99, 27813.6, 27813.9, 27814.2, 27814.6, 27814.81, 27814.99, 27815.1, 27815.2, 27815.31, 27815.31, 27815.4, 27815.49, 27815.6, 27815.6, 27815.6, 27815.6, 27815.7, 27815.7, 27815.6, 27815.49, 27815.4, 27815.31, 27814.99, 27814.9, 27814.7, 27814.6, 27814.31, 27813.99, 27813.6, 27813.2, 27812.7, 27812.1, 27811.6, 27811.1, 27810.4, 27809.49, 27809.1, 27808.49, 27808.1, 27807.49, 27807.1, 27806.81, 27806.49, 27806.4, 27806.4, 27806.4, 27806.4, 27806.2, 27806.31, 27806.31, 27806.4, 27806.4, 27806.49, 27806.4, 27806.4, 27806.4, 27806.31, 27806.31, 27806.4, 27806.31, 27806.4, 27806.31, 27806.4, 27806.2, 27806.31, 27805.99, 27806.2, 27806.49, 27806.6, 27806.49, 27806.4, 27806.4, 27806.2, 27805.99, 27805.81, 27805.99, 27805.99, 27806.1, 27806.2, 27806.2, 27806.4, 27806.49, 27806.6, 27806.81, 27806.81, 27806.81, 27806.9, 27806.99, 27807.1, 27807.1, 27806.9, 27806.99, 27806.9, 27806.6, 27806.6, 27806.7, 27806.9, 27807.1, 27807.31, 27807.49, 27807.6, 27807.7, 27807.99, 27808.1, 27808.2, 27808.4, 27808.7, 27808.9, 27808.9, 27808.99, 27809.2, 27809.4, 27809.9, 27810.2, 27810.81, 27810.99, 27811.49, 27811.9, 27812.2, 27812.49, 27812.7, 27812.81, 27812.7, 27812.49, 27812.7, 27812.49, 27812.7, 27812.6, 27812.49, 27812.31, 27811.7, 27811.4, 27810.99, 27810.4, 27810.2, 27809.49, 27808.9, 27808.49, 27808.1, 27807.9, 27807.4, 27807.1, 27806.6, 27806.4, 27806.1, 27805.9, 27805.7, 27805.6, 27805.4, 27805.31, 27805.1, 27805.1, 27805.2, 27805.31, 27805.7, 27807.31, 27810.7, 27820.997, 27818.9, 27816.9, 27814.99, 27813.1, 27811.2, 27809.479]
A2B2y = [6.943324138e6, 6.9433242e6, 6.9433261e6, 6.9433279e6, 6.9433296e6, 6.94333166e6, 6.9433324e6, 6.9433354e6, 6.9433382e6, 6.9433405e6, 6.9433441e6, 6.9433482e6, 6.9433528e6, 6.9433563e6, 6.9433601e6, 6.9433648e6, 6.9433692e6, 6.9433731e6, 6.9433765e6, 6.9433799e6, 6.9433831e6, 6.9433874e6, 6.943391e6, 6.9433943e6, 6.9433978e6, 6.9434011e6, 6.943405e6, 6.943409e6, 6.9434126e6, 6.9434165e6, 6.9434211e6, 6.9434248e6, 6.9434285e6, 6.9434317e6, 6.943435e6, 6.9434387e6, 6.9434433e6, 6.9434463e6, 6.9434499e6, 6.9434539e6, 6.9434571e6, 6.9434608e6, 6.9434646e6, 6.9434679e6, 6.9434711e6, 6.9434743e6, 6.9434779e6, 6.9434817e6, 6.9434851e6, 6.9434886e6, 6.9434925e6, 6.9434963e6, 6.9434995e6, 6.9435022e6, 6.9435053e6, 6.9435089e6, 6.9435116e6, 6.9435147e6, 6.9435173e6, 6.94352e6, 6.9435223e6, 6.9435248e6, 6.9435275e6, 6.9435305e6, 6.9435332e6, 6.9435359e6, 6.9435388e6, 6.9435424e6, 6.9435454e6, 6.9435488e6, 6.943552e6, 6.9435551e6, 6.9435562e6, 6.9435581e6, 6.9435619e6, 6.9435652e6, 6.9435686e6, 6.9435723e6, 6.9435754e6, 6.9435783e6, 6.9435809e6, 6.9435842e6, 6.9435872e6, 6.9435894e6, 6.9435921e6, 6.9435947e6, 6.9435972e6, 6.9436001e6, 6.9436032e6, 6.9436064e6, 6.9436101e6, 6.9436136e6, 6.9436172e6, 6.9436208e6, 6.9436242e6, 6.9436275e6, 6.9436311e6, 6.9436343e6, 6.9436377e6, 6.9436405e6, 6.9436431e6, 6.9436459e6, 6.9436485e6, 6.9436515e6, 6.9436542e6, 6.9436575e6, 6.9436605e6, 6.9436641e6, 6.9436676e6, 6.9436713e6, 6.9436747e6, 6.9436779e6, 6.9436811e6, 6.9436847e6, 6.943688e6, 6.9436917e6, 6.9436955e6, 6.9436999e6, 6.9437041e6, 6.9437078e6, 6.9437116e6, 6.9437156e6, 6.9437198e6, 6.9437239e6, 6.9437273e6, 6.9437304e6, 6.9437336e6, 6.9437371e6, 6.9437399e6, 6.943743e6, 6.9437462e6, 6.9437496e6, 6.9437524e6, 6.9437562e6, 6.9437601e6, 6.943764e6, 6.943765e6, 6.9437683e6, 6.9437722e6, 6.9437759e6, 6.9437776e6, 6.9437805e6, 6.9437842e6, 6.9437886e6, 6.943793e6, 6.9437972e6, 6.9438019e6, 6.9438066e6, 6.9438115e6, 6.9438163e6, 6.9438212e6, 6.9438263e6, 6.9438311e6, 6.9438369e6, 6.943841e6, 6.9438469e6, 6.9438503e6, 6.9438536e6, 6.9438564e6, 6.9438585e6, 6.9438648e6, 6.9438726e6, 6.9438768e6, 6.9438792e6, 6.9438839e6, 6.943889e6, 6.9438939e6, 6.9438958e6, 6.9439e6, 6.9439047e6, 6.9439065e6, 6.943912e6, 6.9439144e6, 6.9439226e6, 6.9439256e6, 6.9439297e6, 6.943934e6, 6.9439385e6, 6.9439428e6, 6.9439463e6, 6.9439503e6, 6.9439535e6, 6.943957e6, 6.9439614e6, 6.9439654e6, 6.9439712e6, 6.9439756e6, 6.9439801e6, 6.9439857e6, 6.9439958e6, 6.9440009e6, 6.9440093e6, 6.9440165e6, 6.9440233e6, 6.9440312e6, 6.9440409e6, 6.9440459e6, 6.9440528e6, 6.9440582e6, 6.9440634e6, 6.9440684e6, 6.9440742e6, 6.9440787e6, 6.9440836e6, 6.9440888e6, 6.9440939e6, 6.9440962e6, 6.944102e6, 6.9441071e6, 6.944109e6, 6.9441139e6, 6.9441183e6, 6.9441219e6, 6.944127e6, 6.944132793e6, 6.9441344e6, 6.94413848e6, 6.9441447e6, 6.9441503e6, 6.9441554e6, 6.944161e6, 6.9441665e6, 6.944171473e6]

# From visual plot, see 'Not_close_legs.svg':
largest_minimum_distance = sqrt((A2B2x[1] - A1B1x[1])^2 + (A2B2y[1] - A1B1y[1])^2)
# We could increase threshold up to 238m if the function is working properly.
# Physically, A1B1 is the longest path, which we should check every point from.
# However, A2B2 is more dense:
@test length(A1B1x) < length(A2B2x)
@test ! are_paths_close(A1B1x, A1B1y, A2B2x, A2B2y; threshold = 238.0)
@test are_paths_close(A1B1x, A1B1y, A2B2x, A2B2y; threshold = 239.0)
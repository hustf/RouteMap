using Test
using RouteMap
import RouteMap: are_paths_close, indices_of_intersecting_boundary_boxes
# Single leg
ABx = [27223.927, 27229.04, 27235.605, 27239.18, 27247.52, 27255.73, 27265.92, 27275.89, 27285.44, 27294.56, 27303.23, 27303.467, 27311.47, 27313.06, 27314.78, 27315.503, 27315.52, 27315.86, 27315.908, 27316.16, 27315.31, 27314.76, 27314.51, 27314.66, 27315.21, 27316.86, 27318.76, 27320.49, 27322.42, 27324.307, 27324.54, 27326.82, 27329.14, 27331.31, 27333.09, 27335.39, 27337.04, 27338.6, 27340.09, 27341.24, 27341.58, 27345.432, 27353.97, 27357.51, 27374.74, 27392.24, 27415.01, 27426.21, 27426.62, 27427.07, 27427.56, 27428.11, 27428.67, 27429.29, 27429.94, 27430.61, 27431.32, 27432.05, 27432.8, 27433.56, 27434.34, 27435.1, 27435.87, 27436.63, 27437.37, 27438.08, 27438.58, 27439.45, 27440.07, 27440.66, 27441.23, 27441.74, 27442.21, 27442.65, 27443.05, 27443.4, 27444.01, 27444.28, 27444.54, 27444.76, 27444.95, 27445.09, 27445.2, 27445.27, 27445.29, 27445.26, 27445.18, 27445.05, 27444.86, 27444.64, 27448.65, 27453.39, 27465.58, 27476.15, 27485.17, 27495.79, 27506.52, 27517.13, 27521.96, 27533.64, 27539.93, 27552.14, 27564.44, 27577.33, 27589.27, 27599.29, 27604.37, 27613.8, 27626.38, 27635.79, 27647.13, 27657.58, 27666.2, 27675.6, 27685.49, 27695.09, 27706.08, 27715.93, 27716.331]
ABy = [6.945780949e6, 6.94577371e6, 6.945764199e6, 6.94575902e6, 6.94574635e6, 6.94573357e6, 6.94571664e6, 6.94569925e6, 6.94568162e6, 6.94566376e6, 6.94564569e6, 6.945645165e6, 6.94562742e6, 6.94561805e6, 6.94561245e6, 6.945608849e6, 6.94560854e6, 6.94560233e6, 6.945600937e6, 6.94559371e6, 6.9455918e6, 6.94558978e6, 6.94558752e6, 6.94558519e6, 6.94558295e6, 6.94557986e6, 6.94557734e6, 6.94557593e6, 6.94557481e6, 6.945574116e6, 6.94557403e6, 6.94557359e6, 6.9455736e6, 6.94557398e6, 6.94557458e6, 6.94557576e6, 6.94557705e6, 6.94557861e6, 6.94558076e6, 6.94558392e6, 6.9455855e6, 6.945589747e6, 6.94559916e6, 6.94560486e6, 6.94561512e6, 6.9456249e6, 6.94563811e6, 6.94564292e6, 6.94564243e6, 6.94564195e6, 6.94564149e6, 6.94564106e6, 6.94564064e6, 6.94564027e6, 6.94563993e6, 6.94563963e6, 6.94563937e6, 6.94563917e6, 6.94563901e6, 6.94563891e6, 6.94563887e6, 6.94563888e6, 6.94563893e6, 6.94563905e6, 6.94563923e6, 6.94563944e6, 6.94563964e6, 6.94564002e6, 6.94564036e6, 6.94564075e6, 6.94564116e6, 6.94564159e6, 6.94564205e6, 6.94564252e6, 6.945643e6, 6.94564349e6, 6.94564449e6, 6.94564504e6, 6.94564561e6, 6.94564621e6, 6.94564684e6, 6.9456475e6, 6.94564818e6, 6.94564888e6, 6.9456496e6, 6.94565033e6, 6.94565107e6, 6.94565181e6, 6.94565254e6, 6.94565324e6, 6.94565501e6, 6.94565698e6, 6.94566204e6, 6.94566502e6, 6.94566591e6, 6.94566652e6, 6.94566628e6, 6.94566558e6, 6.9456653e6, 6.94566494e6, 6.94566482e6, 6.94566414e6, 6.94566343e6, 6.94566269e6, 6.94566195e6, 6.9456614e6, 6.94566102e6, 6.94565921e6, 6.9456574e6, 6.94565545e6, 6.94565241e6, 6.94564852e6, 6.94564463e6, 6.94563977e6, 6.94563388e6, 6.94562712e6, 6.94561837e6, 6.94561015e6, 6.945609812e6]   
text_A =  "Ulsteinvik skysstasjon"
text_B = "Holsekerdalen"
prominence_A = 1.0
prominence_B = 2.0
BAx = [27716.331, 27715.93, 27706.08, 27695.09, 27685.49, 27675.6, 27666.2, 27657.58, 27647.13, 27635.79, 27626.38, 27613.8, 27604.37, 27599.29, 27589.27, 27577.33, 27564.44, 27552.14, 27539.93, 27533.64, 27521.96, 27517.13, 27506.52, 27495.79, 27485.17, 27476.15, 27465.58, 27453.39, 27448.65, 27444.64, 27444.86, 27445.05, 27445.18, 27445.26, 27445.29, 27445.27, 27445.2, 27445.09, 27444.95, 27444.76, 27444.54, 27444.28, 27444.01, 27443.4, 27443.05, 27442.65, 27442.21, 27441.74, 27441.23, 27440.66, 27440.07, 27439.45, 27438.58, 27438.08, 27437.37, 27436.63, 27435.87, 27435.1, 27434.34, 27433.56, 27432.8, 27432.05, 27431.32, 27430.61, 27429.94, 27429.29, 27428.67, 27428.11, 27427.56, 27427.07, 27426.62, 27426.21, 27415.01, 27392.24, 27374.74, 27357.51, 27350.1, 27345.36, 27339.722, 27332.02, 27330.02, 27327.16, 27325.55, 27322.378, 27319.74, 27317.37, 27311.47, 27303.467, 27303.23, 27294.56, 27285.44, 27275.89, 27265.92, 27265.516]
BAy = [6.945609812e6, 6.94561015e6, 6.94561837e6, 6.94562712e6, 6.94563388e6, 6.94563977e6, 6.94564463e6, 6.94564852e6, 6.94565241e6, 6.94565545e6, 6.9456574e6, 6.94565921e6, 6.94566102e6, 6.9456614e6, 6.94566195e6, 6.94566269e6, 6.94566343e6, 6.94566414e6, 6.94566482e6, 6.94566494e6, 6.9456653e6, 6.94566558e6, 6.94566628e6, 6.94566652e6, 6.94566591e6, 6.94566502e6, 6.94566204e6, 6.94565698e6, 6.94565501e6, 6.94565324e6, 6.94565254e6, 6.94565181e6, 6.94565107e6, 6.94565033e6, 6.9456496e6, 6.94564888e6, 6.94564818e6, 6.9456475e6, 6.94564684e6, 6.94564621e6, 6.94564561e6, 6.94564504e6, 6.94564449e6, 6.94564349e6, 6.945643e6, 6.94564252e6, 6.94564205e6, 6.94564159e6, 6.94564116e6, 6.94564075e6, 6.94564036e6, 6.94564002e6, 6.94563964e6, 6.94563944e6, 6.94563923e6, 6.94563905e6, 6.94563893e6, 6.94563888e6, 6.94563887e6, 6.94563891e6, 6.94563901e6, 6.94563917e6, 6.94563937e6, 6.94563963e6, 6.94563993e6, 6.94564027e6, 6.94564064e6, 6.94564106e6, 6.94564149e6, 6.94564195e6, 6.94564243e6, 6.94564292e6, 6.94563811e6, 6.9456249e6, 6.94561512e6, 6.94560486e6, 6.94560422e6, 6.9456026e6, 6.945601262e6, 6.94560023e6, 6.94560067e6, 6.94560546e6, 6.94560761e6, 6.945611439e6, 6.94561536e6, 6.94561935e6, 6.94562742e6, 6.945645165e6, 6.94564569e6, 6.94566376e6, 6.94568162e6, 6.94569925e6, 6.94571664e6, 6.945717311e6]

# Try to create an empty Leg
@test_throws AssertionError Leg()
# Try to create a Leg with only BA path
@test_throws AssertionError Leg(;BAx, BAy)
# Try to create a Leg with unequal leg length
@test_throws AssertionError Leg(;ABx, ABy = BAy)
# Leg with only AB path
@test Leg(;ABx, ABy) isa Leg
@test round(Leg(;ABx, ABy).bb_utm.corner1[1]) == 27224
# Leg with both directions 
@test Leg(;ABx, ABy, BAx, BAy) isa Leg
leg = Leg(;ABx, ABy, BAx, BAy, text_A, text_B, prominence_A, prominence_B)
@test leg.label_A.prominence == prominence_A
@test leg.label_B.prominence == prominence_B
@test leg.label_A.x == first(ABx)
@test leg.label_A.y == first(ABy)
@test leg.label_B.x == last(ABx)
@test leg.label_B.x == last(ABx)

# Test printing reproduce
leg_copy = Leg(; text_A = "Ulsteinvik skysstasjon", prominence_A = 1.0, text_B = "Holsekerdalen", prominence_B = 2.0, ABx = [27223.927, 27229.04, 27235.605, 27239.18, 27247.52, 27255.73, 27265.92, 27275.89, 27285.44, 27294.56, 27303.23, 27303.467, 27311.47, 27313.06, 27314.78, 27315.503, 27315.52, 27315.86, 27315.908, 27316.16, 27315.31, 27314.76, 27314.51, 27314.66, 27315.21, 27316.86, 27318.76, 27320.49, 27322.42, 27324.307, 27324.54, 27326.82, 27329.14, 27331.31, 27333.09, 27335.39, 27337.04, 27338.6, 27340.09, 27341.24, 27341.58, 27345.432, 27353.97, 27357.51, 27374.74, 27392.24, 27415.01, 27426.21, 27426.62, 27427.07, 27427.56, 27428.11, 27428.67, 27429.29, 27429.94, 27430.61, 27431.32, 27432.05, 27432.8, 27433.56, 27434.34, 27435.1, 27435.87, 27436.63, 27437.37, 27438.08, 27438.58, 27439.45, 27440.07, 27440.66, 27441.23, 27441.74, 27442.21, 27442.65, 27443.05, 27443.4, 27444.01, 27444.28, 27444.54, 27444.76, 27444.95, 27445.09, 27445.2, 27445.27, 27445.29, 27445.26, 27445.18, 27445.05, 27444.86, 27444.64, 27448.65, 27453.39, 27465.58, 27476.15, 27485.17, 27495.79, 27506.52, 27517.13, 27521.96, 27533.64, 27539.93, 27552.14, 27564.44, 27577.33, 27589.27, 27599.29, 27604.37, 27613.8, 27626.38, 27635.79, 27647.13, 27657.58, 27666.2, 27675.6, 27685.49, 27695.09, 27706.08, 27715.93, 27716.331], ABy = [6.945780949e6, 6.94577371e6, 6.945764199e6, 6.94575902e6, 6.94574635e6, 6.94573357e6, 6.94571664e6, 6.94569925e6, 6.94568162e6, 6.94566376e6, 6.94564569e6, 6.945645165e6, 6.94562742e6, 6.94561805e6, 6.94561245e6, 6.945608849e6, 6.94560854e6, 6.94560233e6, 6.945600937e6, 6.94559371e6, 6.9455918e6, 6.94558978e6, 6.94558752e6, 6.94558519e6, 6.94558295e6, 6.94557986e6, 6.94557734e6, 6.94557593e6, 6.94557481e6, 6.945574116e6, 6.94557403e6, 6.94557359e6, 6.9455736e6, 6.94557398e6, 6.94557458e6, 6.94557576e6, 6.94557705e6, 6.94557861e6, 6.94558076e6, 6.94558392e6, 6.9455855e6, 6.945589747e6, 6.94559916e6, 6.94560486e6, 6.94561512e6, 6.9456249e6, 6.94563811e6, 6.94564292e6, 6.94564243e6, 6.94564195e6, 6.94564149e6, 6.94564106e6, 6.94564064e6, 6.94564027e6, 6.94563993e6, 6.94563963e6, 6.94563937e6, 6.94563917e6, 6.94563901e6, 6.94563891e6, 6.94563887e6, 6.94563888e6, 6.94563893e6, 6.94563905e6, 6.94563923e6, 6.94563944e6, 6.94563964e6, 6.94564002e6, 6.94564036e6, 6.94564075e6, 6.94564116e6, 6.94564159e6, 6.94564205e6, 6.94564252e6, 6.945643e6, 6.94564349e6, 6.94564449e6, 6.94564504e6, 6.94564561e6, 6.94564621e6, 6.94564684e6, 6.9456475e6, 6.94564818e6, 6.94564888e6, 6.9456496e6, 6.94565033e6, 6.94565107e6, 6.94565181e6, 6.94565254e6, 6.94565324e6, 6.94565501e6, 6.94565698e6, 6.94566204e6, 6.94566502e6, 6.94566591e6, 6.94566652e6, 6.94566628e6, 6.94566558e6, 6.9456653e6, 6.94566494e6, 6.94566482e6, 6.94566414e6, 6.94566343e6, 6.94566269e6, 6.94566195e6, 6.9456614e6, 6.94566102e6, 6.94565921e6, 6.9456574e6, 6.94565545e6, 6.94565241e6, 6.94564852e6, 6.94564463e6, 6.94563977e6, 6.94563388e6, 6.94562712e6, 6.94561837e6, 6.94561015e6, 6.945609812e6], BAx = [27716.331, 27715.93, 27706.08, 27695.09, 27685.49, 27675.6, 27666.2, 27657.58, 27647.13, 27635.79, 27626.38, 27613.8, 27604.37, 27599.29, 27589.27, 27577.33, 27564.44, 27552.14, 27539.93, 27533.64, 27521.96, 27517.13, 27506.52, 27495.79, 27485.17, 27476.15, 27465.58, 27453.39, 27448.65, 27444.64, 27444.86, 27445.05, 27445.18, 27445.26, 27445.29, 27445.27, 27445.2, 27445.09, 27444.95, 27444.76, 27444.54, 27444.28, 27444.01, 27443.4, 27443.05, 27442.65, 27442.21, 27441.74, 27441.23, 27440.66, 27440.07, 27439.45, 27438.58, 27438.08, 27437.37, 27436.63, 27435.87, 27435.1, 27434.34, 27433.56, 27432.8, 27432.05, 27431.32, 27430.61, 27429.94, 27429.29, 27428.67, 27428.11, 27427.56, 27427.07, 27426.62, 27426.21, 27415.01, 27392.24, 27374.74, 27357.51, 27350.1, 27345.36, 27339.722, 27332.02, 27330.02, 27327.16, 27325.55, 27322.378, 27319.74, 27317.37, 27311.47, 27303.467, 27303.23, 27294.56, 27285.44, 27275.89, 27265.92, 27265.516], BAy = [6.945609812e6, 6.94561015e6, 6.94561837e6, 6.94562712e6, 6.94563388e6, 6.94563977e6, 6.94564463e6, 6.94564852e6, 6.94565241e6, 6.94565545e6, 6.9456574e6, 6.94565921e6, 6.94566102e6, 6.9456614e6, 6.94566195e6, 6.94566269e6, 6.94566343e6, 6.94566414e6, 6.94566482e6, 6.94566494e6, 6.9456653e6, 6.94566558e6, 6.94566628e6, 6.94566652e6, 6.94566591e6, 6.94566502e6, 6.94566204e6, 6.94565698e6, 6.94565501e6, 6.94565324e6, 6.94565254e6, 6.94565181e6, 6.94565107e6, 6.94565033e6, 6.9456496e6, 6.94564888e6, 6.94564818e6, 6.9456475e6, 6.94564684e6, 6.94564621e6, 6.94564561e6, 6.94564504e6, 6.94564449e6, 6.94564349e6, 6.945643e6, 6.94564252e6, 6.94564205e6, 6.94564159e6, 6.94564116e6, 6.94564075e6, 6.94564036e6, 6.94564002e6, 6.94563964e6, 6.94563944e6, 6.94563923e6, 6.94563905e6, 6.94563893e6, 6.94563888e6, 6.94563887e6, 6.94563891e6, 6.94563901e6, 6.94563917e6, 6.94563937e6, 6.94563963e6, 6.94563993e6, 6.94564027e6, 6.94564064e6, 6.94564106e6, 6.94564149e6, 6.94564195e6, 6.94564243e6, 6.94564292e6, 6.94563811e6, 6.9456249e6, 6.94561512e6, 6.94560486e6, 6.94560422e6, 6.9456026e6, 6.945601262e6, 6.94560023e6, 6.94560067e6, 6.94560546e6, 6.94560761e6, 6.945611439e6, 6.94561536e6, 6.94561935e6, 6.94562742e6, 6.945645165e6, 6.94564569e6, 6.94566376e6, 6.94568162e6, 6.94569925e6, 6.94571664e6, 6.945717311e6])

@test sum(leg_copy.ABx .- leg.ABx) ≈ 0.0
@test sum(leg_copy.ABy .- leg.ABy) ≈ 0.0
@test sum(leg_copy.BAx .- leg.BAx) ≈ 0.0
@test leg_copy.label_A.text == leg.label_A.text


# Legs comparison. Different density paths here, reversed of each other:
vx = [1, 2.2, 3, 4.1 , 5, 6]
vy = [1.1, 2.0, 3, 2 , 1.2, 0.5]
wx = [6.8765305817039915, 5.5108313221027805, 3.6517099327681195, 3.151178505491685, 1.2679176009349515]
wy = [1.2223257209157279, 1.2477648298469046, 3.774275715327908, 2.7447059574248542, 1.6639055278414527]
@test are_paths_close(vx, vy, wx, wy; threshold = 2.0)
vy .+= 5
@test ! are_paths_close(vx, vy, wx, wy; threshold = 2.0)

@test are_paths_close(ABx, ABy, BAx, BAy)


# Legs collection
legs = [leg]
leg_asymmetric_dummy = Leg(;ABx = [1.0, 2],
                ABy = [1.0, 2],
                BAx = [2, 1.5, 1],
                BAy = [2, 1.5, 1],
                text_A = "Important",
                text_B = "Intermediate stop",
                prominence_A = 1.0,
                prominence_B = 2.0)
# The boundary boxes of leg and leg_asymmetric_dummy do not overlap.
@test isempty(indices_of_intersecting_boundary_boxes(legs, leg_asymmetric_dummy))

add_or_update_if_not_redundant!(legs, leg_asymmetric_dummy)
@test length(legs) == 2
# Redundantly add again. Does not increase the number of legs.
add_or_update_if_not_redundant!(legs, leg_asymmetric_dummy)
@test length(legs) == 2

# Now make practically the same leg 'leg', but in
# the way it would have been made if approached first
# from the B to A direction.
leg_reversed = Leg(;ABx = BAx, ABy = BAy, BAx = ABx, BAy = ABy, 
    text_A = text_B, text_B = text_A, 
    prominence_A = prominence_B, 
    prominence_B = prominence_A)
# Adding the reverse version to 'legs' is also redundant.
add_or_update_if_not_redundant!(legs, leg_reversed)
@test length(legs) == 2

# Now say we made one (symmetric) leg by travelling a route via Ulsteinvik to Holsekerdalen.
# Later, we come back but discover we need to take the other way around the roundabout. 
# Also, Ulsteinvik is the end stop now, hence the label has prominence > 1.
# Let's start over and see if we end up with an assymmetric leg, containing both ways
# around the roundabout, and with the Ulsteinvik label with promincence = 1.

# Lets reuse variable names. The first leg is 'symmetric' since we don't know
# about the alternative way about the roundandround yet.
leg = Leg(;ABx, ABy, text_A, text_B, prominence_A = 2.0, prominence_B = 2.0)
legs = [leg]
@test isempty(legs[1].BAx)
leg_returning = Leg(;ABx = BAx, ABy = BAy, text_A = text_B, text_B = text_A, prominence_A = 2.0, prominence_B = 1.0)
@test isempty(leg_returning.BAx)

# The boundary boxes of both legs are identical, but with roundoff errors.
@test ! isempty(indices_of_intersecting_boundary_boxes(legs, leg_returning))
add_or_update_if_not_redundant!(legs, leg_returning)
@test length(legs) == 1
@test ! isempty(legs[1].BAx)

